// Code for Ben's Board to respond to direction and velocity commands

/*
  TODO:
  - Using Ben's Arnm Controller board - 4 PWM pins and 4 Direction Pins to drive the BrainPower Motor Controller 

*/

#include <SPI.h>
#include <mcp_can.h>
#include <Wire.h>

#define BACK_LEFT_WHEEL_PWM 3
#define BACK_RIGHT_WHEEL_PWM 5
#define FRONT_LEFT_WHEEL_PWM 6
#define FRONT_RIGHT_WHEEL_PWM 9

#define BACK_LEFT_WHEEL_DIR 2
#define BACK_RIGHT_WHEEL_DIR 4
#define FRONT_LEFT_WHEEL_DIR 7
#define FRONT_RIGHT_WHEEL_DIR 8

#define WHEELS_FORWARD 1
#define WHEEL_REVERSE 2

#define ID_TX1 0x1BEEF019
#define ID_RX 0x1BEEF009

uint8_t rightMotorPWM = 0;
uint8_t leftMotorPWM = 0;

// CAN bus parameters
// Initialise CAN variables
long unsigned int rx_address;
uint8_t ext = 1;
unsigned char messageLength = 0;
unsigned char rxBuffer[8];

const long unsigned int tx_1_address = ID_TX1;

unsigned char tx_1_buf[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


const int SPI_CS_PIN = 10;  // CHECK SPI CS PIN
MCP_CAN CAN(SPI_CS_PIN); 

void setup() {
  Serial.begin(9600);
  
  Serial.println("CAN BUS Module Initialized!");

  // Setup PWM pins for Motor Controller
  pinMode(BACK_LEFT_WHEEL_PWM, OUTPUT);
  pinMode(BACK_RIGHT_WHEEL_PWM, OUTPUT);
  pinMode(FRONT_LEFT_WHEEL_PWM, OUTPUT);
  pinMode(FRONT_RIGHT_WHEEL_PWM, OUTPUT);

  // Setup direction pins for Motor Controller
  pinMode(BACK_LEFT_WHEEL_DIR, OUTPUT);
  pinMode(BACK_RIGHT_WHEEL_DIR, OUTPUT);
  pinMode(FRONT_LEFT_WHEEL_DIR, OUTPUT);
  pinMode(FRONT_RIGHT_WHEEL_DIR, OUTPUT);  

  // CAN bus Setup
  if(CAN.begin(MCP_ANY, CAN_500KBPS, MCP_16MHZ) == CAN_OK){
    analogWrite(FRONT_LEFT_WHEEL_PWM, 100);
    digitalWrite(FRONT_RIGHT_WHEEL_DIR, HIGH);
    delay(1000);
    analogWrite(FRONT_LEFT_WHEEL_PWM, 100);
  }
  else{
    analogWrite(FRONT_LEFT_WHEEL_PWM, 0); 
  } 

}

void loop() {



  if (CAN_MSGAVAIL == CAN.checkReceive()) {
    receiveCAN();
  }

  analogWrite(BACK_LEFT_WHEEL_PWM, leftMotorPWM);
  analogWrite(BACK_RIGHT_WHEEL_PWM, rightMotorPWM);

  analogWrite(FRONT_LEFT_WHEEL_PWM, leftMotorPWM);
  analogWrite(FRONT_RIGHT_WHEEL_PWM, rightMotorPWM);

}

/**
   Read and handle messages from the can bus relevant to this controller
*/
void receiveCAN() {


  CAN.readMsgBuf(&rx_address, 1, &messageLength, rxBuffer);
  switch (rx_address) {
  
    case ID_TX1:
      // Read Data from Sensor Board and Send something back
      Serial.write(rxBuffer,messageLength);
      transmitData();
      break;
  
    default:
      break;
  }
}

void transmitData() {
  // 3 byte char array (0,0,1);
  byte data[3] = {0x00, 0x00, 0x01};

  // send data:  ID = 0x100, Standard CAN Frame, Data length = 8 bytes, 'data' = array of data bytes to send
  byte sndStat = CAN.sendMsgBuf(ID_TX1, 0, 3, data);
}
